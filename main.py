import os
import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage

from config import BOT_TOKEN, BOT_WORK_TIMEOUT_HOURS
from handlers import router

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–æ—Ç–∞"""
    bot = Bot(token=BOT_TOKEN)
    storage = MemoryStorage()
    dp = Dispatcher(storage=storage)
    
    dp.include_router(router)
    
    try:
        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        if BOT_WORK_TIMEOUT_HOURS and BOT_WORK_TIMEOUT_HOURS > 0:
            logger.info(f"‚è∞ –ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å {BOT_WORK_TIMEOUT_HOURS} —á–∞—Å–æ–≤ (—Ç–∞–π–º–∞—É—Ç –≤–∫–ª—é—á–µ–Ω)")
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å —Ç–∞–π–º–µ—Ä–æ–º
            bot_task = asyncio.create_task(dp.start_polling(bot))
            await asyncio.wait_for(bot_task, timeout=BOT_WORK_TIMEOUT_HOURS*60*60)
        else:
            logger.info("‚ôæÔ∏è –¢–∞–π–º–∞—É—Ç –æ—Ç–∫–ª—é—á–µ–Ω (Render/–ø—Ä–æ–¥). –ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏.")
            await dp.start_polling(bot)
        
    except asyncio.TimeoutError:
        logger.info(f"‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –∏—Å—Ç–µ–∫–ª–æ ({BOT_WORK_TIMEOUT_HOURS} —á–∞—Å–æ–≤), –∑–∞–≤–µ—Ä—à–∞–µ–º...")
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
        await dp.stop_polling()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        await bot.session.close()
        logger.info("üîí –°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞")

if __name__ == "__main__":
    asyncio.run(main())